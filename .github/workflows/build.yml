name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest grpcio-tools
    
    - name: Build and test
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: ./scripts/build.sh
    
    # Build the package and create a GitHub release
    - name: Build package
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python -m build
        
    - name: Extract version
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: version
      run: |
        VERSION=$(grep -m 1 'version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Extracted version: $VERSION"
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Create a tag
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git tag v$VERSION
        git push origin v$VERSION
        
        # Create a release using curl and capture the response
        RESPONSE=$(curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{
            "tag_name": "v'"$VERSION"'",
            "name": "Release v'"$VERSION"'",
            "body": "Truffle SDK v'"$VERSION"' Release",
            "draft": false,
            "prerelease": false
          }')
        
        # Extract the upload URL from the response
        UPLOAD_URL=$(echo "$RESPONSE" | grep -o '"upload_url": "[^"]*' | cut -d'"' -f4 | sed 's/{?name,label}//')
        
        echo "Upload URL: $UPLOAD_URL"
        
        # Upload assets
        for asset in dist/*.whl dist/*.tar.gz; do
          filename=$(basename "$asset")
          echo "Uploading $filename..."
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$asset" \
            "$UPLOAD_URL?name=$filename"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
